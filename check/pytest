#!/usr/bin/env bash

################################################################################
# Runs pytest on the repository.
#
# Usage:
#     check/pytest [--actually-quiet] [--cirq-only] [--flags for pytest] [file-paths-relative-to-repo-root]
#
# The --actually-quiet argument filters out any progress output from pytest.
# If --cirq-only is specified, only cirq-core tests are executed other cirq modules won't be available on the
# PYTHONPATH, which is useful to test cirq-core's ability to function independently.
#
# You may specify pytest flags and specific files to test. The file paths
# must be relative to the repository root. If no files are specified, everything
# is tested.
################################################################################

# Get the working directory to the repo root.
cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd "$(git rev-parse --show-toplevel)"

PYTEST_ARGS=()
ACTUALLY_QUIET=""
CIRQ_ONLY=""
for arg in $@; do
    if [[ "${arg}" == "--actually-quiet" ]]; then
        ACTUALLY_QUIET=1
    elif [[ "${arg}" == "--cirq-only" ]]; then
        CIRQ_ONLY=1
    else
        PYTEST_ARGS+=("${arg}")
    fi
done

if [ -z "${CIRQ_ONLY}" ]; then
  source dev_tools/pypath
else
  export PYTHONPATH=cirq-core
  PYTEST_ARGS+=("./cirq-core")
fi

if [ -z "${ACTUALLY_QUIET}" ]; then
    pytest "${PYTEST_ARGS[@]}"
    RESULT=$?
else
    # Filter out lines like "...F....x...      [ 42%]", with coloring.
    pytest -q --color=yes "${PYTEST_ARGS[@]}" |
        perl -nle'print if not m{^(.\[0m)?[\.FEsx]+(.\[36m)?\s+\[\s*\d+%\](.\[0m)?$}'
    RESULT=${PIPESTATUS[0]}
fi

if [ "$RESULT" = 5 ]; then
  echo "[exit 5] No tests collected, but ignored."
  exit 0
fi

exit "$RESULT"